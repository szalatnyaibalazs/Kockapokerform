<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AADa2toByMjIAZKSkgKvr68EpKSkBJKSkgH///8BZ2dnBAYGBjkBAQGqAwMD3QMDA90BAQGrCQkJOVxc
        XAT///8Ajo6OAaurqwSoqKgEhoaGAZ6engOzs7MEmpqaA4qKigGqqqoEqqqqBImJiQGcnJwDs7OzBKCg
        oAO9vb0A2NjYAfT09ACVlZUFgYGBB5mZmQHJyckCpqamBhERESIBAQGBBAQE4wQEBP8BAQGWAwMDlgQE
        BP8DAwPjAQEBghYWFiSqqqoG////AYmJiQNxcXEJfX19Bc3NzQB5eXkGcXFxCZGRkQKPj48CcnJyCXt7
        ewbAwMABi4uLBZOTkwbDw8MBnp6eAYWFhQZsbGwIsLCwARUVFRUICAhuAwMD0wEBAf4DAwP9AwMD/wIC
        AnwDAwN8BAQE/wICAv0BAQH+BAQE1AgICG4PDw8ToaGhAmRkZAlYWFgHUlJSAllZWQhdXV0JVFRUBFVV
        VQRdXV0JWVlZCFFRUQJjY2MHhoaGB6CgoAO5ubkE////AQ8PDwkNDQ1RBAQEwAAAAPoCAgL/BgYGygMD
        A2ABAQHKCAgIhgYGBoYAAADKBQUFYQYGBssBAQH/AAAA+gUFBb8KCgpQAwMDCGpqagRWVlYNVVVVBFVV
        VQFVVVULVVVVClVVVQFVVVUEVVVVDVZWVgXExMQAubm5A7S0tAEKCgoyAwMDowMDA/MDAwP/AgIC/wMD
        A/UICAhOAAAAAAMDA4wFBQWDBQUFgwMDA4wAAAAACAgITAICAvUCAgL/AgIC/wMDA/MDAwOjDAwMNWRk
        ZAVWVlYHVVVVBVVVVQdVVVUHVVVVBVVVVQdVVVUHW1tbB4ODgwOpqakDAQEBPgQEBNgEBAT+AAAA7AEB
        AfoFBQX/AgIC5QAAACM0NDQOBgYGugEBAX8CAgJ/BwcHuSoqKgwAAAAjAwMD5QQEBP8AAAD6AQEB7AUF
        Bf4DAwPZAAAANnl5eQVVVVUNVVVVAlVVVQJVVVUNVVVVB25ubgBlZWUGeXl5CpaWlgIDAwO+AgIC/wMD
        A6kMDAw1BAQEsgEBAf8DAwP3BQUFgQQEBIoCAgL5BgYGgAYGBoEBAQH6BQUFiwUFBYACAgL4AgIC/wQE
        BLINDQ01AgICqAICAv8EBASqLy8vDF5eXgRVVVUIVVVVCFVVVQRVVVUHVVVVCFpaWgeFhYUDq6urAwMD
        A/kBAQHvAgICOf///wMFBQWOAAAA/wICAv8EBAT+AQEB/wEBAf8ICAiDBgYGgwAAAP8CAgL+BQUF/gEB
        Af8AAAD/BwcHj////wEAAAA4AgIC8QUFBd0NDQ0dAAAAAGJiYglWVlYKVVVVAVVVVQVVVVUNV1dXBbKy
        sgC3t7cDAQEB/wQEBOgTExMsCQkJFgICAsYEBAT/AgIC/wEBAfQEBATKBAQE9QICAn0DAwN9BAQE9AMD
        A8gBAQH0AwMD/wQEBP8BAQHFDw8PGBQUFC0DAwPpAQEB4g0NDTUKCgpcBwcHJ2NjYwNWVlYKVVVVCFRU
        VAFhYWEHe3t7CJ6engMBAQH/AwMD/AUFBa4BAQG0AgIC/AQEBP8CAgL+AQEBhiYmJhUFBQWgAgICgAMD
        A4AGBgagISEhEwEBAYUDAwP+BAQE/wEBAfwCAgK0BQUFsQICAv4BAQHfCgoKRAQEBN8BAQHVBAQERHV1
        dQdXV1cHVFRUAmFhYQd7e3sInp6eAgMDA/8BAQH/AQEB/wQEBP8DAwP/AAAA/wICAusVFRU1AAAAAAEB
        AZUHBweHBgYGhwAAAJX///8BFRUVNQEBAeoAAAD/BAQE/wMDA/8AAAD/AgIC/wUFBd8GBgZAAAAA3gQE
        BP8EBATdAQEBQ39/fwNWVlYNV1dXBbi4uAC4uLgDAgIC/wICAv8CAgLkBQUFlwMDA94BAQH/AwMD7AsL
        Cz0KCgo1AgIC2gYGBnUFBQV4AgIC2wwMDDYLCws9AwMD7QICAv8DAwPeBQUFmQICAuUCAgL/AwMD4AgI
        CEMCAgLfAwMD/wMDA/8CAgLcCQkJR4GBgQVcXFwGhoaGA6qqqgQAAAD/BAQE+woKCmgAAAAAAgICjAUF
        Bf8CAgL/AAAA1gQEBL0JCQl9AgICMAUFBTEJCQmEAwMDvwAAANYDAwP/BAQE/wEBAYwAAAAACwsLbAIC
        Av0AAADfCgoKQwUFBeABAQH/AQEB/wUFBf8DAwPcAAAAQomJiQV6enoKlpaWAgICAv8CAgLmCQkJKIKC
        ggQEBAShAgIC/wMDA+sEBASYCQkJQgQEBGkDAwPQAwMDzAQEBGQJCQlFBAQEmgICAuwCAgL/BAQEoImJ
        iQUICAgnAwMD6AMDA+EJCQlDAgIC3wMDA/8DAwP/AgIC/wICAv8DAwPcCQkJR97e3gKysrIDAwMD/wEB
        AfICAgJWCwsLYgMDA+MAAACpCAgISQwMDFwBAQG9AAAA+gQEBP8DAwP/AAAA+QMDA7sMDAxaBAQERwAA
        AKkEBATiCQkJXQAAAFUCAgL0BQUF4AYGBkAAAADfBAQE/AUFBa0AAACLAgICzQUFBf8CAgLcAAAAQv//
        /wEBAQH/AwMD/wQEBOwBAQGzBQUFVwwMDEcEBASqAQEB9AMDA/8DAwP/AQEB/wICAv8DAwP/AgIC/wEB
        AfQEBASnCwsLSAQEBFQCAgKvBAQE6gICAv8BAQHfCwsLRAQEBOECAgLuBQUFNP///wEWFhYgAQEBugMD
        A/8EBATbBgYGQwEBAfgEBATTCQkJbAMDAzwDAwONBAQE6wICAv8AAAD/AwMD/wQEBPYBAQHSAgIC0gQE
        BPYCAgL/AAAA/wMDA/8EBATrAgICkAUFBT4JCQlnAwMD0wAAANkLCwtEBAQE5AEBAf8CAgKxDg4ORg8P
        DywBAQGrAwMD/wQEBPoCAgLBBAQEswICAngCAgJ1BQUF3gMDA/8AAAD/AgIC/wQEBP8BAQH+AQEBfigo
        KBgjIyMWAAAAfQICAv8EBAT/AQEB/wAAAP8EBAT/BAQE4QAAAHsEBASJBwcHowgICDIAAADoBAQE/wQE
        BP8AAADrAgICxQYGBqoEBARtAQEBaQMDA+EKCgozAwMDuwICAvsDAwP/AwMD/wEBAf8DAwP/AwMD/wIC
        Av8CAgKrCQkJTAkJCUsCAgKqAgIC/wMDA/8CAgL/AQEB/wMDA/8DAwP/AQEB/AMDA8AMDAxBBAQElwIC
        AuoEBATEBQUFjAQEBFcICAhECAgIWQQEBIgCAgLHAwMD5AAAAAAbGxsjCQkJegAAANABAQH8BQUF/wIC
        Av8AAAD/AwMD/wQEBP8AAAD3AQEB9wUFBf8CAgL/AAAA/wMDA/8EBAT/AAAA/AEBAdAKCgp5EhISIQAA
        ADoHBwduDw8PTQICAkICAgJrBwcHqAMDA9sAAAD4AwMD/wUFBf8BAQGjqampA66urgNubm4EExMTIAYG
        Bm4CAgLJAwMD+gICAv8CAgL/AgIC/wICAv8DAwP/AgIC/wICAv8CAgL/AgIC+gICAskFBQVuCgoKPwYG
        BlEaGhoYBwcHTwUFBYwDAwPFAwMD7AICAv4CAgL/AwMD/wICAv8DAwP/AgIC8wYGBlC2trYEpKSkAVNT
        UwJiYmILgICABQAAABQFBQVjBgYGwwEBAfkAAAD/BAQE/wMDA/8AAAD/AgIC+AYGBsEDAwNjAQEBG///
        /wMGBgaHAAAArAUFBU0FBQXyAQEB/wAAAP8EBAT/BAQE/wAAAP8CAgL/BQUF/wICAv8AAADHFhYWF6Gh
        oQF+fn4GXl5eCFVVVQNVVVUGY2NjCKysrAMNDQ0RCAgIXQQEBLMBAQHYAgIC2gQEBLYHBwddAwMDPQUF
        BYsFBQWdBwcHNQICAq0HBwd5BQUFhQEBAf8DAwP/AwMD7QICAp0CAgK1AwMD/wMDA/8BAQH/AwMD/wYG
        BoX///8AoaGhAXp6egdgYGAJVFRUAlVVVQRVVVUMVVVVBgAAAAASEhIpCwsLVAMDAz4ICAgoHBwcIwQE
        BIwAAADjAwMD/wQEBP0BAQHsAQEB6w0NDU4DAwO+AAAA/wMDA/QJCQlm4ODgAQMDA1wEBAT9AwMD/wAA
        AP8DAwPvERERPwAAAACzs7MEnZ2dAlRUVAJVVVULVVVVCFVVVQFVVVUHZmZmCggICCYBAQHJBAQE6AQE
        BLUAAACqAgIC+wQEBPoCAgLrAQEB/QQEBP8EBATKAQEBPwICAucEBAT/AgICxQUFBQ4ZGRkiBQUFvAAA
        AP8CAgL/BAQE/wICAr4JCQkN9/f3A6ysrAOQkJADWFhYBFVVVQlVVVUIVVVVA1VVVQdVVVUJbGxsBAQE
        BEUDAwPeAwMD/wEBAf8DAwP/BQUFqAoKCjICAgKlAwMD/wUFBZUCAgJiAgIC/QMDA/8CAgLnAgICkQQE
        BMgDAwP+AQEB/wICAv8DAwP/BQUFdwAAAACurq4Dtra2AHZ2dghiYmIKUlJSAVVVVQNVVVUOVVVVBlJS
        UgBWVlYJb29vCQEBAUMBAQHbBQUF/wICAv8AAACX////AhMTEzoBAQHpAgICXQcHB50CAgL/AAAA/wMD
        A/8EBAT/AQEB/wEBAf8EBAT/AwMD/wAAAOYNDQ00paWlCJaWlgKnp6cChoaGBVtbWwZVVVUGVVVVB1VV
        VQZVVVUHVVVVBlVVVQdXV1cHd3d3BAkJCUcCAgLcAwMD/wICAucHBwdaBwcHVAMDA9MJCQlEAgIC0gIC
        Av8CAgL/AwMD/wICAv8CAgL/AgIC/wICAv8CAgL8AwMDh0ZGRgmKiooEpqamBLe3twSmpqYBUlJSAVVV
        VQxVVVUIT09PAFVVVQZVVVUNVVVVA1VVVQFWVlYMbW1tBwAAAEICAgLcBQUF/wEBAfMAAADxBQUFtwoK
        ClAAAADzAgIC/wUFBf8BAQH/AAAA/wQEBP8EBAT+AAAA6AMDA4YuLi4ZdHR0A9LS0gC6uroDoaGhAouL
        iwVnZ2cHVVVVBFdXVwZiYmIIWVlZB1NTUwNcXFwIX19fCFVVVQRZWVkGhYWFBgkJCUcBAQHcAwMD/wMD
        A/8DAwN4BAQEeQMDA/8DAwP/AQEB/wMDA/8DAwPwAgICvgQEBHYPDw81RUVFComJiQJjY2MHi4uLBqSk
        pAP///8AmJiYBYaGhgenp6cBioqKA3Z2dgqDg4ME6urqAHt7ewd3d3cJoqKiAYyMjAN4eHgKr6+vAwAA
        AEIEBATbBAQE/AICAmsCAgK5BAQE/wMDA/MAAADIBQUFhRERET8REREO////AJiYmAeGhoYF////AJCQ
        kAWYmJgHw8PDAdzc3AHKysoBnJycAra2tgOrq6sDj4+PAaampgO4uLgDnp6eA5iYmAK0tLQDrKysBJCQ
        kAGpqakD+/v7AQUFBUMBAQHCAwMD4AMDA+MBAQGjBgYGUBoaGhecnJwC////AODg4AKwsLADk5OTAaGh
        oQO5ubkDp6enA7+/vwHb29sBAAEAAoAABAAAAAAAAAAAAgCEAAAAAAAIAAAAAAAAAQIAAAAAAAAAAACA
        AAIAAAAAEAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAEBAAABAAAAAAAA
        AAKBAAAAAAAAAAQAAAIAAAAAgQAASAAAAQA=
</value>
  </data>
</root>